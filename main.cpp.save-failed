#include "quads.hpp"
#include <iostream>

void buildQuads()
{

#define PROCESS_VERT(x, y, z) glm::normalize(glm::vec3(x, y, z)) //(float)planet.radius

  // Cubo para ser transformado em esfera
  glm::vec3 verts[] =
  {
    PROCESS_VERT(-1, -1, -1), // 0
    PROCESS_VERT( 1, -1, -1), // 1
    PROCESS_VERT( 1,  1, -1), // 2
    PROCESS_VERT(-1,  1, -1), // 3
    PROCESS_VERT(-1, -1,  1), // 4
    PROCESS_VERT( 1, -1,  1), // 5
    PROCESS_VERT( 1,  1,  1), // 6
    PROCESS_VERT(-1,  1,  1), // 7
  };

#undef PROCESS_VERT

  Quad quad0;
  quad0.c0 = 0;  quad0.c1 = 1;   quad0.c2 = 2;  quad0.c3 = 3;
  Quadtree::Quadtree(&quad0);

  Quad quad1;
  quad1.c0 = 1;  quad1.c1 = 5;   quad1.c2 = 6;  quad1.c3 = 2;
  Quadtree::Quadtree(&quad1);

  Quad quad2;
  quad2.c0 = 5;  quad2.c1 = 4;   quad2.c2 = 7;  quad2.c3 = 6;
  Quadtree::Quadtree(&quad2);

  Quad quad3;
  quad3.c0 = 4;  quad3.c1 = 0;   quad3.c2 = 3;  quad3.c3 = 7;
  Quadtree::Quadtree(&quad3);

  Quad quad4;
  quad4.c0 = 3;  quad4.c1 = 2;   quad4.c2 = 6;  quad4.c3 = 7;
  Quadtree::Quadtree(&quad4);

  Quad quad5;
  quad5.c0 = 4;  quad5.c1 = 5;   quad5.c2 = 1;  quad5.c3 = 0;
  Quadtree::Quadtree(&quad5);

}

int main(int argc, char** argv)
{
  GLuint pos = 0, v =10;

  return 0;
}
